"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/employeeHomePage";
exports.ids = ["pages/api/employeeHomePage"];
exports.modules = {

/***/ "mysql":
/*!************************!*\
  !*** external "mysql" ***!
  \************************/
/***/ ((module) => {

module.exports = require("mysql");

/***/ }),

/***/ "(api)/./src/pages/api/employeeHomePage.js":
/*!*******************************************!*\
  !*** ./src/pages/api/employeeHomePage.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var mysql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql */ \"mysql\");\n/* harmony import */ var mysql__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mysql__WEBPACK_IMPORTED_MODULE_0__);\n\nasync function handler(req, res) {\n    const client = mysql__WEBPACK_IMPORTED_MODULE_0___default().createConnection({\n        host: \"localhost\",\n        user: \"ehotel\",\n        port: 3306,\n        password: \"2132ehotel!\",\n        database: \"Hotels\"\n    });\n    const { action , data  } = req.body;\n    const validActions = [\n        \"insert\",\n        \"update\",\n        \"delete\",\n        \"search\",\n        \"insert_payment\",\n        \"check_in\",\n        \"rent_now\"\n    ];\n    if (!validActions.includes(action)) {\n        res.status(400).json({\n            error: \"Invalid action\"\n        });\n        return;\n    }\n    try {\n        client.connect();\n        let result;\n        switch(action){\n            case \"insert_payment\":\n                const insertPaymentQuery = `\n          INSERT INTO payments (customer_name, ssn_sin, amount)\n          VALUES ('${data.customer_name}', '${data.ssn_sin}', '${data.amount}')\n        `;\n                await new Promise((resolve, reject)=>{\n                    client.query(insertPaymentQuery, (error, results)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve(results);\n                        }\n                    });\n                });\n                result = \"success\";\n                break;\n            case \"check_in\":\n                const checkInQuery = `\n                UPDATE Booking\n                SET status = 'renting', Check_in_date = NOW()\n                WHERE Booking_ID = ${data.booking_id}\n            `;\n                await new Promise((resolve, reject)=>{\n                    client.query(checkInQuery, (error, results)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve(results);\n                        }\n                    });\n                });\n                result = \"success\";\n                break;\n            case \"rent_now\":\n                const customerName = data.customer_name;\n                const ssnSin = data.ssn_sin;\n                const registrationDate = data.registration_date;\n                // Insert new customer into Customer table\n                const insertCustomerQuery = `\n                INSERT INTO Customer (Name, SSN_SIN, Registration_Date)\n                VALUES ('${customerName}', '${ssnSin}', '${registrationDate}');\n              `;\n                await new Promise((resolve, reject)=>{\n                    client.query(insertCustomerQuery, (error, results)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve(results);\n                        }\n                    });\n                });\n                // Get the ID of the newly inserted customer\n                const getLastInsertIdQuery = `\n                SELECT LAST_INSERT_ID() as Customer_ID;\n              `;\n                const customerResult = await new Promise((resolve, reject)=>{\n                    client.query(getLastInsertIdQuery, (error, results)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve(results);\n                        }\n                    });\n                });\n                const customerId = customerResult[0].Customer_ID;\n                const roomId = data.room_id;\n                const checkInDate = data.check_in_date;\n                const checkOutDate = data.check_out_date;\n                const checkAvailabilityQuery = `\n                SELECT COUNT(*) as count\n                FROM Booking\n                WHERE Room_ID = ${roomId}\n                AND (\n                  (Check_in_date BETWEEN '${checkInDate}' AND '${checkOutDate}')\n                  OR (Check_out_date BETWEEN '${checkInDate}' AND '${checkOutDate}')\n                  OR ('${checkInDate}' BETWEEN Check_in_date AND Check_out_date)\n                  OR ('${checkOutDate}' BETWEEN Check_in_date AND Check_out_date)\n                )\n              `;\n                const availabilityResult = await new Promise((resolve, reject)=>{\n                    client.query(checkAvailabilityQuery, (error, results)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve(results);\n                        }\n                    });\n                });\n                if (availabilityResult[0].count === 0) {\n                    // Insert new booking into Booking table\n                    const insertBookingQuery = `\n                  INSERT INTO Booking (Customer_ID, Room_ID, Check_in_date, Check_out_date, status)\n                  VALUES (${customerId}, ${roomId}, '${checkInDate}', '${checkOutDate}', 'renting');\n                `;\n                    await new Promise((resolve, reject)=>{\n                        client.query(insertBookingQuery, (error, results)=>{\n                            if (error) {\n                                reject(error);\n                            } else {\n                                resolve(results);\n                            }\n                        });\n                    });\n                    // Get the Booking ID and Room Price\n                    const getBookingInfoQuery = `\n                  SELECT B.Booking_ID, R.Price\n                  FROM Booking B\n                  JOIN Room R ON B.Room_ID = R.Room_ID\n                  WHERE B.Customer_ID = ${customerId}\n                  AND B.Room_ID = ${roomId}\n                  AND B.Check_in_date = '${checkInDate}'\n                  AND B.Check_out_date = '${checkOutDate}'\n                `;\n                    const bookingInfoResult = await new Promise((resolve, reject)=>{\n                        client.query(getBookingInfoQuery, (error, results)=>{\n                            if (error) {\n                                reject(error);\n                            } else {\n                                resolve(results);\n                            }\n                        });\n                    });\n                    const bookingId = bookingInfoResult[0].Booking_ID;\n                    const roomPrice = bookingInfoResult[0].Price;\n                    result = {\n                        status: \"success\",\n                        bookingId,\n                        customerName,\n                        ssnSin,\n                        roomPrice\n                    };\n                } else {\n                    result = {\n                        status: \"error\",\n                        message: \"Room not available for the selected dates.\"\n                    };\n                }\n                break;\n            default:\n                result = \"invalid action\";\n        }\n        res.status(200).json(result);\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({\n            error: \"Internal server error\",\n            message: err.message\n        });\n    } finally{\n        client.end();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/employeeHomePage.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/employeeHomePage.js"));
module.exports = __webpack_exports__;

})();